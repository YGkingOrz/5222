以下是《Assignment 1 Specification: Flatland Challenge (2025)》的完整翻译，未遗漏任何文字：

---

# 作业 1 - FIT5222 规划与自动推理

## 作业 1：Flatland 挑战赛

在本次作业中，你的任务是为一组火车在铁路网络中安排调度。

你需要协调每辆火车从起点车站出发尽快到达终点车站。由于可能有多辆火车同时运行，你必须确保每条路径都不会发生碰撞。

本次作业分为三个部分，难度逐步增加。每个问题对应的分数在标题中已注明。及格分数为 50%。

请务必观看 Moodle 上的介绍视频，并阅读我们为你准备的《Flatland 入门文档》。两者都可在 Moodle 获取。

开始本作业前，必须更新你的 Flatland 代码和安装环境：

* 进入 flatland 文件夹
* 执行 `git pull`
* 执行 `python3 setup.py install`
* 执行 `python3 -m pip list`，确保 flatland-rl 的版本已更新为 2.2.4
* （提示：如果 `python` 已正确指向对应版本，也可使用 `python` 替代 `python3`）

获取本作业代码（piglet 仓库中的 `assignment1_2023` 分支）的方法请参见《Flatland 入门文档》。

当竞赛服务器上线后，你将可以看到提交后的 f 分数。

---

## 问题 1：热身题（15 分）

你将一次获得一个起点和终点。你的任务是独立地为每辆火车规划路径。本题中不存在碰撞风险，也没有时间维度。

你需要为 Flatland 领域实现一个 successor 函数，并选择一个用于路径规划的算法。你可以使用课堂上讲过的任何技术、阅读文献中提到的技术，或自行设计新方法。

你的解决方案将被评估在 40 个测试实例上（仅教学团队拥有这些实例），时间限制为 2 小时，每个实例只有 1 个代理（agent）。我们将比较你的总个体路径代价（SIC），其中未到达目标位置的代理，其代价为：

```
T_max = 8 * (地图宽度 + 地图高度)
```

然后使用以下方式计算分数：

```
p_score = (completed_agents_SIC + T_max * failed_agents) / total_agents
f_score = p_score_staff / p_score
最终得分 = f_score × 15
```

其中 `p_score_staff` 是教学团队实现的最优解的 p 分数。一般来说，一个好的方案应该使得 `p_score` 越小越好，`f_score` 越大越好。

---

## 问题 2：简单模式（25 分）

你将一次获得一个起点和终点，以及其他已在运行的火车的路径。你的任务是为当前火车单独规划路径，且需避免与其他火车的路径发生冲突。

你需要修改 successor 函数以考虑时间维度。此外，可能存在搜索算法无法找到可行路径的情况（因为动态障碍物阻塞了所有路径），此时请返回一个空列表即可。

注意：你规划的每个动作和位置都必须避免碰撞。

你的方案将被评估在 56 个实例上，时间限制为 2 小时，评分方法与问题 1 相同，但有以下差异：

* 为每个实例单独计算 `f_score`
* 每个实例包含多个代理
* 最终得分 = `∑ f_score_i ÷ 56 × 25`，其中 i 为实例编号

此问题满分 25 分。

---

## 问题 3：挑战模式（60 分）

你将同时获得一组起点和终点。你的任务是同时为所有火车规划不发生碰撞的路径。但每个代理都有一个期望到达时间，迟到将受到惩罚。

你可以使用课堂上讲授、文献中提到的或自行设计的任何方法。

所有代理都由你控制，你需要让所有代理成功到达目标位置。

在此问题中，代理在执行过程中可能会出现故障。评估器将在出现新故障时调用 `replan` 函数。你需实现 `replan` 函数来正确处理故障。关于故障与重规划的细节，请参见《Flatland 入门文档》。

你的方案将被评估在 56 个不同难度的实例上，时间限制为 2 小时，评分方法类似问题 1，但不同点如下：

```
p_score = (completed_agents_SIC + penalty + T_max * failed_agents) / total_agents
penalty = 2 * total_delayed_timesteps
```

* 每个实例包含多个代理
* 每个实例的 `f_score` 将基于一个基线实现 `p_base` 和一个高级实现 `p_adv`（或学生中最佳者）

```
f_score = min(0.5 * (p_base - p) / (p_base - p_adv), 0.5) + max(0.5 * (p_base - p) / (p_base - p_adv), 0)
最终得分 = ∑ f_score_i ÷ 56 × 60
```

此问题满分 60 分。

---

## 报告（50 分）

你需要撰写一份报告，描述你对每道题的解决思路。这包括：

* 文本描述你的方法
* 为什么选择该方法
* 详细讨论
* 附加材料（如伪代码、图像、表格等）

---

## 报告评分标准

**1. 方法描述（35 分）**

| 等级           | 要求                        |
| ------------ | ------------------------- |
| N（0%-49%）    | 描述不完整或不足                  |
| P（50%-59%）   | 高层次描述算法及伪代码               |
| C（60%-69%）   | 讨论优缺点、时间复杂度、空间复杂度、完整性和最优性 |
| D（70%-79%）   | 反思实现效果，有实验、分析和伪代码等        |
| HD（80%-100%） | 提供数值实验、标准基准对比、充分分析        |

**2. 表达能力（15 分）**

| 等级 | 要求                      |
| -- | ----------------------- |
| N  | 无逻辑、混乱                  |
| P  | 写作不准确，结构松散，支持材料匮乏       |
| C  | 结构基本清晰，有支持材料，但整合度不高     |
| D  | 写作准确，结构良好，材料合适且整合性强     |
| HD | 写作清晰流畅，科学报告风格，材料与讨论密切配合 |

---

## 奖励分数

我们将为以下情况额外发放加分：

* 为同一问题实现多个方法
* 实现未在课堂/教程中讲解但出现在推荐论文中的先进算法

加分依据包括：实现难度、有效性和书写质量。

**加分可能决定你是 D 还是 HD！**

---

## 成绩说明

本次作业总分为 150 分。及格线为 75 分（即总分的 50%）。

---

## 提交说明

### 截止日期

请在 Moodle 上查看提交截止时间。除非事先获批，逾期提交将扣分。迟交超过 7 天将不予评分。

### 提交到 Contest Server：

* 竞赛服务器和提交说明将在截止前一周公布
* 届时你将在 ED 论坛收到通知
* 按照《FIT5222 Flatland Challenge 提交指南》将代码提交到服务器
* 你的代码将自动评分，必须提交到服务器

### 提交到 Moodle：

1. 将你的实现代码放在名为 `src` 的文件夹下（可将 piglet 文件夹内容复制到 `src`）

   * 打包为 zip，命名格式为 `姓_学号_flatland.zip`（例如：`Chen_123456_flatland.zip`）

2. 报告文档为单个 PDF，命名格式为 `姓_学号_report.pdf`（例如：`Chen_123456_report.pdf`）

3. 将上述两个文件提交到 Moodle 作业提交页面

   * **请不要压缩 PDF 报告文件**，Moodle 需使用 PDF 生成 Turnitin 检查报告

---

**备注**：本作业对生成式 AI 的使用不作限制，但必须由学生独立完成。

---

接下来是第二份任务文件：以下是《Introduction to FIT5222 Flatland Challenge (2025)》的完整翻译（版本 1.1），未遗漏任何内容：

---

# FIT5222 规划与自动推理

## Flatland 简介（版本 1.1）

### Flatland 是什么

Flatland 是一个用于开发二维栅格铁路世界中多智能体路径规划算法的开源工具包。它提供了一个二维栅格环境，可以放置多个智能体，每个智能体需在该栅格世界中完成一个或多个导航任务。该库由 SBB、AIcrowd 和来自 AIcrowd 社区的众多贡献者与研究员共同开发。

在本课程中，你可以在 Flatland 上实现你所学的一切内容。

---

## 第 1 部分：安装

参考第一周的安装指南，在你的电脑上安装 Flatland。

在开始作业前，必须更新 Flatland 代码与安装环境：

* 进入 flatland 文件夹
* 执行 `git stash save`（如果你在第一周有未提交的更改）
* 执行 `git pull`
* 执行 `git stash pop`
* 执行 `python3 setup.py install`
* 执行 `python3 -m pip list`，应看到 flatland-rl 的版本更新为 2.2.4
* （提示：如果你的 `python` 已正确指向所需版本，可用 `python` 替代 `python3`）

官网链接：

* 
https://www.sbb.ch/en/

* 
https://www.aicrowd.com/


---

## 第 2 部分：Flatland 基本规则

### 特性：

* Flatland 模拟一个二维栅格空间的铁路环境
* 是离散时间模拟器，即所有动作在固定时间步内执行
* 智能体可在定义好的单元格间方向移动
* 每个单元格通常只能容纳一个智能体
* 每一步，智能体可选择一个动作，并执行对应的状态转移
* 在执行转移时，Flatland 会检查该转移是否合法；若合法则更新位置
* 某些情况下会出现故障（仅在问题 3 中发生），导致列车短时间无法移动
* 每个智能体都有起始位置和目标位置，目标是最小化所有路径代价之和或总耗时（makespan）
* 每个实例有最大时间步数限制：`1.5 × 高 × 宽`，所有智能体需在该限制前到达终点

### 栅格：

* 使用整数矩形网格（dim\_x, dim\_y）定义环境空间大小
* 使用北（上）、东（右）、南（下）、西（左）表示方向

每个格子的位置可用 `(行, 列)` 表示，也可转换为一个整数索引：`行 × 地图宽度 + 列`

---

## Tile 类型（地块种类）

每个单元格对应一个 tile 类型，不同类型决定了智能体可通过的方向。铁路问题中一共定义了 8 种基本类型：

* **Case 0**：墙壁，无法进入
* **Case 1**：直通格，不能决策转向，只能前进或等待
* **Case 2**：简单转向器，从下方进入需在左/上选方向，直行更便宜
* **Case 3**：多路径直通格
* **Case 4**：单分支转向器，可从西/南进入并选择方向
* **Case 5**：多入口转向器，从任意方向进入都需选择方向
* **Case 6**：结构上等价于 Case 2，但从南进入无偏好
* **Case 7**：死胡同，只能原地或后退

---

## 执行与终止规则

* 每个问题中，模拟器会执行你为每个智能体生成的路径
* 按模拟器规定顺序逐步执行动作
* 若某智能体无法执行下一个动作，则模拟器调用 `replan` 函数重新规划
* 当前实例在以下任一条件满足时终止：

  * 所有智能体无碰撞到达目标
  * 所有计划动作都已执行
  * 超过最大时间步限制

---

## 第 3 部分：与环境交互（适用于问题 1 和 2）

### 地图信息

地图存储在 `GridTransitionMap` 对象中，例如变量 `rail`。

* 地图宽度：`rail.width`
* 地图高度：`rail.height`

获取当前格子可用方向：

```python
cell_transitions = rail.get_transitions(x, y, direction)
# 返回格式：[北, 东, 南, 西]
```

注意：不同方向下相同格子返回的可转移方向不同，因此要正确指定位置与朝向，这些信息均为智能体状态的一部分。朝向还影响启发式函数的效果。

---

### 找不到路径的情况

问题 2 中，个别实例中由于起始位置被障碍物暂时占用，导致无法生成路径，此时可返回空列表，该智能体不会在地图中显示。

这只会出现在不超过 5~~6 个实例中，每次仅有 1~~2 个智能体无路径。

---

## 问题 3 所需信息

### 获取智能体信息

所有智能体信息存储在 `agents` 列表中，每个元素为 `EnvAgent` 对象，包含属性：

* `initial_position`: (x,y) 起始位置
* `initial_direction`: \[0-3] 初始朝向（0=北，1=东，2=南，3=西）
* `target`: (x,y) 目标位置
* `position`: 当前执行位置
* `direction`: 当前朝向
* `status`: 状态（0=未激活，1=激活，2=到达，3=到达并从地图移除）
* `deadline`: 期望最晚到达时间步
* `malfunction_data`: 故障数据字典（包含“malfunction”键表示持续时间）

到达晚于 deadline 的代理将被罚分。

---

### 执行与故障处理

* 初始时 status 为 0，位置为 None
* 一旦收到“前进”指令，status = 1，position 变为初始位置
* 到达目标后，status = 3

故障信息示例：

```python
malfunction_data = {"malfunction": 5}
```

表示还有 5 步无法执行任何命令，需等待修复。

---

## Replan 重规划

当发生新故障或两个智能体的动作不兼容（可能碰撞）时，系统会调用 `replan` 函数。

传入参数包括：

* `current_timestep`: 当前时间步
* `existing_paths`: 旧路径
* `new_malfunction_agents`: 当前时间步内出现新故障的代理 ID 列表
* `failed_agents`: 当前时间步路径失败的代理 ID，包括故障引发连锁影响者等

问题 3 中你完全控制所有代理，必须为所有代理找到路径。

---

## 第 4 部分：Assignment 1 代码说明

### 获取 piglet 的 assignment1 分支

步骤如下：

1. 克隆仓库：

   ```bash
   git clone https://github.com/ooonesevennn/piglet-public.git
   ```

2. 确认当前分支（默认可能是 single-agent-prac）：

   ```bash
   git branch
   ```

3. 拉取远程分支：

   ```bash
   git fetch
   ```

4. 若有本地更改，请先提交：

   ```bash
   git add *
   git commit -m "你的修改说明"
   ```

5. 切换到作业分支：

   ```bash
   git checkout assignment1_2023
   ```

---

### 问题脚本

你将看到以下脚本：

* `question1.py`: 单智能体路径规划
* `question2.py`: 避免与现有路径冲突
* `question3.py`: 多智能体路径规划，含故障处理

每个脚本都包含一个 `get_path()` 函数，你需在其中实现自己的算法，并返回相应数据。默认函数是示例/占位实现，请替换。

---

### 测试代码

激活虚拟环境后运行：

```bash
python3 question1.py
```

也可替换为其他脚本文件。运行时会输出统计信息。

---

### 调试与可视化

每个脚本包含变量 `debug` 和 `visualizer`：

* `debug=True`:

  * 输出详细执行信息
  * 遇到冲突或错误暂停运行
  * 显示冲突详情

* `visualizer=True`:

  * 显示路径图
  * 若 `debug` 也为 True，则显示代理 ID

* `test_single_instance=True`:

  * 仅评估指定实例（level/test）

---

## 第 5 部分：练习 - 键盘控制列车（可选）

你可以尝试用键盘控制列车以加深理解。步骤如下：

1. 创建 Python 文件

2. 引入必要模块：

   ```python
   from flatland.envs.rail_generators import complex_rail_generator
   from flatland.envs.schedule_generators import complex_schedule_generator
   from flatland.envs.rail_env import RailEnv
   from flatland.utils.rendertools import RenderTool
   import time
   ```

3. 初始化环境：

   ```python
   railWaySettings = complex_rail_generator(nr_start_goal=10, nr_extra=10, min_dist=10, max_dist=99999, seed=999)
   env = RailEnv(width=15, height=15, rail_generator=railWaySettings, number_of_agents=1)
   env.reset()
   ```

4. 图形界面：

   ```python
   render = RenderTool(env, gl="PILSVG", screen_height=500, screen_width=500)
   render.render_env(show=True, frames=False)
   ```

5. 按键监听：

   ```python
   keyMap = {"Left":1, "Up":2, "Right":3, "Down":4}
   def _keypress(event): ...
   window.bind("<KeyPress>", _keypress)
   ```

6. 控制函数与主循环：

   ```python
   def my_controller(...): ...
   while not all_done: ...
   ```

7. 执行程序：确保选用含 Flatland 的虚拟环境。

---

### 参考链接

* Flatland 文档：
http://flatland-rl-docs.s3-website.eu-central-1.amazonaws.com/

* VSCode 或 Pycharm 需正确配置虚拟环境（非 base 环境）

---


接下来是第三份任务文件：以下是《Assignment 1 Contest Server Submission Instruction Suzhou Version (2025)》的完整翻译，逐句对应，未遗漏任何内容：

---

# FIT5222 Flatland 挑战赛提交说明

各位同学好，我们很高兴地宣布：**FIT5222 Flatland Challenge 的竞赛服务器现已上线**（确切链接将在截止日期前一周更新）！现在你可以提交你的 **Question 3** 解法，我们会在 **40 个测试实例** 上评估你的方案。请在提交前仔细阅读以下说明！

---

## 评估方式

### 测试实例特点：

| 地图大小      | 代理数量 | 最大步数 | 实例数量 |

| --------- | ---- | ---- | ---- |

| 10 × 10   | 5    | 160  | 8    |

| 25 × 25   | 12   | 400  | 8    |

| 50 × 50   | 25   | 800  | 8    |

| 75 × 75   | 37   | 1200 | 8    |

| 100 × 100 | 50   | 1600 | 8    |

| 150 × 150 | 75   | 2400 | 8    |

| 150 × 150 | 150  | 2400 | 8    |

### 故障机制（Malfunctions）：

在某些实例中，每个时间步都有 **1/10 的概率**发生故障，故障持续时间为 **5 至 15 个时间步**。

---

## 提交限制：

* 只能使用 **1 个线程**解决问题；

* 必须使用 **Python** 编写；

* 所有依赖包必须可通过 **conda** 或 **pip** 安装；

* 每个问题的所有实例评估总时限为 **2 小时**；

* 服务器将同时评估 **问题 1、2 和 3 的代码**；

* 如果你已经实现并测试了 Q1 和 Q2，再去实现 Q3，**请务必保证没有破坏你之前的 Q1 和 Q2 实现**，以便我们统计总成绩；

* 内存限制为 **4GB**；

* 服务器运行环境为 **Python 3.7/3.8 的虚拟环境**，并已安装 flatland-rl；

* 若提交程序耗时超过 2 小时或使用内存超出 4GB，该进程将被强制终止，**所有未完成的实例将被赋予代价：**`T_max × 总代理数`。

---

## 排名方式：

你的提交将在排行榜上按照 **Question 3 的 f\_score 得分** 进行排名。

---

## 截止时间：

提交截止时间与作业 1 的截止时间一致。

---

## 提交步骤

### 注册竞赛服务器账号：

1. 打开竞赛官网（链接将在截止前一周更新）；

2. 点击“Register”，**使用你的 Monash 邮箱注册**；

3. 点击“Submit”；

4. 同时，请在 Ed Discussion 上**评论你的 Monash 邮箱**；

5. 然后你将收到来自 Bitbucket 的项目邀请邮件，请查收；

6. 按照邮件说明，使用 Monash 邮箱注册 Bitbucket 账号，或若已有账号，直接加入仓库；

7. 若**没有收到邀请邮件**，请在 Bitbucket 发帖反馈。

---

### 设置 Bitbucket App 密码或 SSH 密钥（用于推送代码）：

你需要为 git 操作设置 app password（应用密码）或 SSH 密钥：

* App 密码指南： https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/

* SSH 密钥指南： https://support.atlassian.com/bitbucket-cloud/docs/set-up-an-ssh-key/

> ⚠️ App 密码生成后 **只会显示一次**，请记得保存。

---

## 连接提交仓库（Git Repo）：

1. 在竞赛网站点击“Show Git Link”，再点击“Open Git Repo”；

2. 若使用 App 密码，请切换为 **HTTPS** 并复制链接（不包含 `git clone`）；

3. 打开命令行，进入你的 piglet-public 文件夹，确保你在 `assignment1_2023` 分支，且已包含 `question3.py`；

4. 执行命令添加远程仓库：

```bash

git remote add contest_server 你的_git_repo_link

```

5. 执行命令检查是否添加成功：

```bash

git remote -v

```

---

## 提交你的代码：

6. **在本地运行代码进行测试，确保无错误且运行时长不超过 2 小时**；

7. **添加并提交所有更改（包括 environment.yml、question3.py 及你自己写的其他文件）**：

```bash

git add *

git commit -m "你的提交说明"

```

或使用 VS Code 完成以上步骤（见第 3 周教程）。务必写明 commit 信息便于识别。

8. 将你本地的 `assignment1_2023` 分支推送至线上 `assignment1` 分支：

```bash

git push contest_server assignment1_2023:assignment1

```

> Git 可能会要求你输入前面生成的 app 密码。

9. 推送完成后，**在竞赛网站点击“Evaluate my codes”按钮**；

10. 观察“Evaluator Status”：先变为“queuing”，再变为“running”，最后为“idle”；

11. 点击“My Submissions”可查看提交记录，点击“Full Results”查看详细评估结果。

---

## 常见问题（Q\&A）

1. **如何查看我的提交历史？**

点击竞赛网站的“My submission”按钮。

2. **如果提交失败怎么办？**

阅读报错信息；如无法判断原因，请发邮件至 `shiyan.su@monash.edu` 或在 ED 论坛发帖，我们会手动调试。

3. **如何区分我提交的每个版本？**

查看提交记录的最后一栏“commit info”。

4. **如果我忘记竞赛网站密码怎么办？**

发邮件至 `shiyan.su@monash.edu` 或在 ED 上发帖，我们会帮你重置。

5. **如果提交失败且显示报错信息怎么办？**

尝试理解错误来源（代码问题 or 评估过程问题）；如无法判断，请截图错误信息，并在 ED 上发私帖。

6. **如果算法找不到解怎么办？**

使用 debug 模式和可视化，找出哪个代理失败，并思考原因。

> 所有测试实例都保证：每个代理**至少存在一条可行路径**，不需要穿越其他代理的起点或终点。